public class CameraControler : MonoBehaviour
{
    public float dumping = 1.0f;//сглаживание останоки камеры
    public Vector2 offset = new Vector2(2f, 1f);//смещение камеры относительно персонажа
    public bool isLeft;// следит за направлением персонажа
    private Transform player;//определение персонажа
    private int lastX;//определяет последние направление персонажа

    //точки за которые камера не сможет выходить
    [SerializeField]
    float LeftLimit;
    [SerializeField]
    float RightLimit;
    [SerializeField]
    float BottomLimit;
    [SerializeField]
    float UpperLimit;

    void Start()
    {
        offset = new Vector2(Mathf.Abs(offset.x), offset.y);//вычисление положения камеры
        FindPlayer(isLeft);
    }
    public void FindPlayer (bool playerIsLeft)
    {
        player = GameObject.FindGameObjectWithTag("Player").transform;//определям персонажа
        lastX = Mathf.RoundToInt(player.position.x);//работа по оси x
        if (playerIsLeft)
        {
            transform.position = new Vector3(player.position.x - offset.x, player.position.y + offset.y, transform.position.z);//если персонаж смотрит в лево камера должна сместиться в лево вычитая значения по x и по y
        }
        else
        {
            transform.position = new Vector3(player.position.x + offset.x, player.position.y + offset.y, transform.position.z);//тоже самое но со смещением вправо
        }
    }
    void Update()
    {
       if (player)
        {
            int currentX = Mathf.RoundToInt(player.position.x);
            if (currentX > lastX) isLeft = false; else if (currentX < lastX) isLeft = true;
            lastX = Mathf.RoundToInt(player.position.x);
            Vector3 target;
            if (isLeft)
            {
                target  = new Vector3(player.position.x - offset.x, player.position.y + offset.y, transform.position.z);
            }
            else
            {
                target = new Vector3(player.position.x + offset.x, player.position.y + offset.y, transform.position.z);
            }
            Vector3 currentPosition = Vector3.Lerp(transform.position, target, dumping * Time.deltaTime);
            transform.position = currentPosition;
        }

        transform.position = new Vector3(
            Mathf.Clamp(transform.position.x, LeftLimit, RightLimit)/*ограничение камеры по оси x*/,
             Mathf.Clamp(transform.position.y, BottomLimit, UpperLimit)/*juhfybxtybt rfvths gj jcb y*/,
             transform.position.z/*ось z не изменяется*/);
    }
}
